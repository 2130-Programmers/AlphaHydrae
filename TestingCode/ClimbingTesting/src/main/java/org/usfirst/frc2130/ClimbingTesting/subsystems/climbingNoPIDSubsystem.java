// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2130.ClimbingTesting.subsystems;


import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;

import org.usfirst.frc2130.ClimbingTesting.Robot;
import org.usfirst.frc2130.ClimbingTesting.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class climbingNoPIDSubsystem extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public WPI_TalonSRX elevatorMasterMotor;
    public WPI_TalonSRX elevatorSlaveMotor;
    public WPI_TalonSRX footLiftingMotor;
    public WPI_TalonSRX footDrivingMotor;

    public WPI_VictorSPX leftFrontMotor;
    public WPI_VictorSPX leftRearMotor;
    public WPI_VictorSPX rightFrontMotor;
    public WPI_VictorSPX rightRearMotor;

    public Solenoid brakesSolenoid;
    public Solenoid rollerSolenoid;

    public DoubleSolenoid feetSolenoid;

    public DigitalInput bottomProx;
    public DigitalInput footProx;
    public DigitalInput middleProx;

    public boolean atClimbableLevel;

    public climbingNoPIDSubsystem() {

        elevatorMasterMotor = new WPI_TalonSRX(8);
        elevatorSlaveMotor = new WPI_TalonSRX(9);
        footLiftingMotor = new WPI_TalonSRX(7);
        footDrivingMotor = new WPI_TalonSRX(6);

        leftFrontMotor = new WPI_VictorSPX(1);
        leftRearMotor = new WPI_VictorSPX(3);
        rightFrontMotor = new WPI_VictorSPX(0);
        rightRearMotor = new WPI_VictorSPX(2);

        brakesSolenoid = new Solenoid(4);
        rollerSolenoid = new Solenoid(3);

        feetSolenoid = new DoubleSolenoid(0, 5, 6);

        bottomProx = new DigitalInput(0);
        middleProx = new DigitalInput(1);
        footProx = new DigitalInput(3);

        followMaster();

        leftRearMotor.follow(leftFrontMotor);
        rightRearMotor.follow(rightFrontMotor);
    }

    @Override
    public void initDefaultCommand() {
    }

    @Override
    public void periodic() {
    }

    public void followMaster() {
        elevatorSlaveMotor.follow(elevatorMasterMotor);
    }

    public double encoderPosition() {
        return -elevatorSlaveMotor.getSelectedSensorPosition(0);
    }

    public void resetFeet() {
        feetSolenoid.set(Value.kForward);
    }

    public boolean atSetpoint() {
        return atClimbableLevel;
    }

    public boolean atFootProx() {
        return footProx.get();
    }

    public void liftElevator(int setpoint, int error) {
        elevatorMasterMotor.configPeakOutputForward(0.7, 0);
        elevatorMasterMotor.configPeakOutputReverse(-0.1, 0);
        elevatorSlaveMotor.configPeakOutputForward(0.7, 0);
        elevatorSlaveMotor.configPeakOutputReverse(-0.1, 0);

        if (encoderPosition() >= setpoint + error) {
            elevatorMasterMotor.set(0);
            atClimbableLevel = false;
        } else if (encoderPosition() > setpoint - error && encoderPosition() < setpoint + error) {
            elevatorMasterMotor.set(0);
            atClimbableLevel = true;
        } else {
            elevatorMasterMotor.set(1);
            brakesSolenoid.set(true);
            atClimbableLevel = false;
        }

        rollerSolenoid.set(true);
        
    }

    public void stopAllMotors() {
        elevatorMasterMotor.set(0);
        elevatorSlaveMotor.set(0);
        footDrivingMotor.set(0);
        footLiftingMotor.set(0);
        leftFrontMotor.set(0);
        rightFrontMotor.set(0);
    }

    public void disengagaeBrakes() {
        brakesSolenoid.set(true);
    }

    public void endElevator() {
        brakesSolenoid.set(false);
        feetSolenoid.set(Value.kReverse);
    }

    public void liftRobot() {
        elevatorMasterMotor.configPeakOutputForward(0.3, 0);
        elevatorMasterMotor.configPeakOutputReverse(-0.31, 0);
        elevatorSlaveMotor.configPeakOutputForward(0.3, 0);
        elevatorSlaveMotor.configPeakOutputReverse(-0.31, 0);

        footLiftingMotor.configPeakOutputForward(1, 0);
        footLiftingMotor.configPeakOutputReverse(-1, 0);

        footDrivingMotor.configPeakOutputForward(1, 0);
        footDrivingMotor.configPeakOutputReverse(-1, 0);

        brakesSolenoid.set(true);
        elevatorMasterMotor.set(-1);
        footLiftingMotor.set(1);
        rollerSolenoid.set(false);
        //footDrivingMotor.set(-0.1);
    }

    public void retractFoot() {
        footLiftingMotor.set(-1);
    }

    public void moveRobot() {
        footDrivingMotor.set(-1);
        leftFrontMotor.set(0.2);
        rightFrontMotor.set(-0.2);
    }

    public boolean atBottomProx() {
        return !bottomProx.get();
    }

    public boolean atMiddleProx() {
        return !middleProx.get();
    }

    public void homeEncoder() {
        if(atBottomProx()) {
            elevatorSlaveMotor.setSelectedSensorPosition(0, 0, 0);
        }
    }

    public void engageBrakes() {
        brakesSolenoid.set(false);
    }

    public void startup() {
        brakesSolenoid.set(true);
        feetSolenoid.set(Value.kForward);
        atClimbableLevel = false;
    }
}