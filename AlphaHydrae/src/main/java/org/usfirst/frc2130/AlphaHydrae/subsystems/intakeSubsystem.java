// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2130.AlphaHydrae.subsystems;


import org.usfirst.frc2130.AlphaHydrae.Robot;
import org.usfirst.frc2130.AlphaHydrae.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.Solenoid;

import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

/**
 *
 */
public class intakeSubsystem extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonSRX leftRollerMotor;
    private WPI_TalonSRX rightRollerMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    private Solenoid handlerPositionSolenoid;
    private Solenoid rocketPlacementSolenoid;

    //This is a boolean that is used for the handler position command, so it will only run once at a time.
    public boolean handlerPositionSetting;

    //I'm not entirely sure what this is used for, but it is needed for the defense/play handler methods.
    private int i;

    public intakeSubsystem() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        leftRollerMotor = new WPI_TalonSRX(5);
        
        
        
        rightRollerMotor = new WPI_TalonSRX(4);
        
        
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        handlerPositionSolenoid = new Solenoid(1);
        
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new runIntakeCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    // Runs the intake. If no triggers are not held down, it will do nothing. If both triggers are held down, it will do nothing.
    // If right trigger is held down, it will run intake. If left trigger is held down, it will run outtake.

    public double joystickValue(int stickNumber) {
        return Robot.oi.driverJoystick.getRawAxis(stickNumber);
    }

    public void runIntake() {
        if (joystickValue(3) > 0 && joystickValue(2) > 0) {
            leftRollerMotor.set(0);
            rightRollerMotor.set(0);
        } else if (joystickValue(3) == 0 && joystickValue(2) == 0) {
            leftRollerMotor.set(0);
            rightRollerMotor.set(0);
        } else if (joystickValue(3) > 0 && joystickValue(2) == 0) {
            leftRollerMotor.set(1);
            rightRollerMotor.set(-1);
        }else if (joystickValue(3) == 0 && joystickValue(2) > 0) {
            leftRollerMotor.set(-1);
            rightRollerMotor.set(1);
        }
    }
    
    // These two commands set the rocket placement solenoid. True means it is receiving voltage, false means it is not.
    // The solenoids can be changed physically to decide what state "true" means, it can be set to mean either forwards or backwards.

    public void resetLimiting() {
        leftRollerMotor.configPeakOutputForward(1,0);
        leftRollerMotor.configPeakOutputReverse(-1,0);
        rightRollerMotor.configPeakOutputForward(1,0);
        rightRollerMotor.configPeakOutputReverse(-1,0);
    }

    // These two commands set the handler position solenoid. 
    public void handlerPositionForward() {
        handlerPositionSolenoid.set(true);
    }
    public void handlerPositionBackward() {
        handlerPositionSolenoid.set(false);
    }

    // This is a command that makes the defense/play handler only move once when the button is pressed, rather than repeatedly.
    public void handlerPositioning() {
        if (handlerPositionSetting) {
            handlerPositionForward();
        }
        else {
            handlerPositionBackward();
        }
    }

    // This makes sure that our boolean is set to the right setting, and that our bot starts with the handler in play position.
    public void startingPosition() {
        handlerPositionSetting = false;
        handlerPositionBackward();
        
    }

    // Not sure entirely how this works, but it makes sure that our defense/play handler only runs once at a time.
    public void setHandlerBoolean() {
        if(i == 0 && Robot.oi.handlerPositionValue()) {
            handlerPositionSetting = !handlerPositionSetting;
            i++;
        } else if (!Robot.oi.handlerPositionValue()){
            i = 0;
        }
    
    }

    //Stops the roller motors
    public void stopRollers() {
        leftRollerMotor.set(0);
        rightRollerMotor.set(0);
    }

    public boolean ifJoysticksDepressed() {
        if (Robot.oi.driverJoystick.getRawAxis(3) != 0 || Robot.oi.driverJoystick.getRawAxis(2) != 0) {
            return true;
        } else {
            return false;
        }
    }
}

