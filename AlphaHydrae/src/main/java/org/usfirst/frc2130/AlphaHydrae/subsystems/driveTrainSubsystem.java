// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc2130.AlphaHydrae.subsystems;

import org.usfirst.frc2130.AlphaHydrae.Robot;
import org.usfirst.frc2130.AlphaHydrae.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.networktables.NetworkTableInstance;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class driveTrainSubsystem extends Subsystem {

    public double limelightX;
    public double limelightY;
    public double limelightArea;
    public NetworkTable table;
    public NetworkTableEntry tx;
    public NetworkTableEntry ty;
    public NetworkTableEntry ta;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_VictorSPX leftMotorMaster;
    private WPI_VictorSPX leftMotorSlave;
    private SpeedControllerGroup leftMotorGroup;
    private WPI_VictorSPX rightMotorMaster;
    private WPI_VictorSPX rightMotorSlave;
    private SpeedControllerGroup rightMotorGroup;
    private DifferentialDrive driveTrainDifferential;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public driveTrainSubsystem() {

        table = NetworkTableInstance.getDefault().getTable("limelight");
        tx = table.getEntry("tx");
        ty = table.getEntry("ty");
        ta = table.getEntry("ta");

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        leftMotorMaster = new WPI_VictorSPX(1);
        
        
        
        leftMotorSlave = new WPI_VictorSPX(3);
        
        
        
        leftMotorGroup = new SpeedControllerGroup(leftMotorMaster, leftMotorSlave  );
        addChild("leftMotorGroup",leftMotorGroup);
        
        
        rightMotorMaster = new WPI_VictorSPX(0);
        
        
        
        rightMotorSlave = new WPI_VictorSPX(2);
        
        
        
        rightMotorGroup = new SpeedControllerGroup(rightMotorMaster, rightMotorSlave  );
        addChild("rightMotorGroup",rightMotorGroup);
        
        
        driveTrainDifferential = new DifferentialDrive(leftMotorGroup, rightMotorGroup);
        addChild("driveTrainDifferential",driveTrainDifferential);
        driveTrainDifferential.setSafetyEnabled(true);
        driveTrainDifferential.setExpiration(0.1);
        driveTrainDifferential.setMaxOutput(1.0);

        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        //shiftingSolenoid = new Solenoid(0);

        leftMotorSlave.follow(leftMotorMaster);
        rightMotorSlave.follow(rightMotorMaster);

    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new drivingConditionalCommand());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

        limelightX = tx.getDouble(0.0);
        limelightY = ty.getDouble(0.0);
        limelightArea = ta.getDouble(0.0);
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public double forwardUsingArea() {
        /*double k = 60;

        double output = (k / (Math.pow(limelightArea, (3/4))));
        double outputPercentage = output / 100;

        if (limelightArea == 0) {
            return 0;
        } else {
            if (limelightArea < 5) {
                return (outputPercentage);
            } else {
                return 0;
            }
        }*/

        return Robot.oi.driverJoystick.getRawAxis(1) * -1;
    }

    public double createOffset() {
        double x = limelightX;

        return x / 25;
    }

    public double returnLX() {
        return limelightX;
    }

    public void stopAllMotors() {
        rightMotorMaster.set(0);
        leftMotorMaster.set(0);
    }

    public void applyPower(double speed) {
        rightMotorMaster.set(-speed);
        leftMotorMaster.set(speed);
    }
    
    public void driveToLimelight() {

        double normOffset = createOffset();
        double absOffset = Math.abs(normOffset);

        double distancePower = forwardUsingArea();

        double rightPower;
        double leftPower;

        if (normOffset >= 0) {
            rightPower = distancePower - absOffset;
            leftPower = distancePower + absOffset;
        } else if (normOffset < 0) {
            rightPower = distancePower + absOffset;
            leftPower = distancePower - absOffset;
        } else {
            rightPower = distancePower;
            leftPower = distancePower;
        }

        rightMotorMaster.set(-rightPower);
        leftMotorMaster.set(leftPower);
    }

    // Uses an arcade drive to run the drive train
    public void driveWithDifferential() {
        driveTrainDifferential.arcadeDrive(Robot.oi.driverJoystick.getRawAxis(1) * -1,
                                           Robot.oi.driverJoystick.getRawAxis(4) * .7);
    }
    
    public double returnLimelightArea() {
        return limelightArea;
    }

}
