// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2130.AlphaHydrae;

import org.usfirst.frc2130.AlphaHydrae.commands.*;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    public JoystickButton changeHandlerBooleanButton;
    public JoystickButton changeHandlerPositionButton;
    public JoystickButton rocketPlacementForwardButton;
    public JoystickButton rocketPlacementReverseButton;
    public JoystickButton switchDrivingButton;
    public JoystickButton switchPipelineButton;
    public JoystickButton switchPipelineBooleanButton;
    public JoystickButton changeClawButton;
    public JoystickButton shiftingDriveTrainButton;
    public Joystick driverJoystick;
    public JoystickButton elevatorManualLowHeightButton;
    public JoystickButton elevatorManualMidHeightButton;
    public JoystickButton elevatorManualMaxHeightButton;
    public JoystickButton elevatorLowHeightButton;
    public JoystickButton elevatorMidHeightButton;
    public JoystickButton elevatorMaxHeightButton;
    public JoystickButton outtakeButton;
    public JoystickButton intakeButton;
    public JoystickButton engageManualMode;
    public JoystickButton startLevelThreeClimbingButton;
    public JoystickButton startLevelTwoClimbingButton;
    public JoystickButton changeVisionLimelightButton;
    public JoystickButton changeVisionDriverButton;
    public JoystickButton extractGamePieceButton;
    public Joystick operatorJoystick;

    public OI() {
        
        /* 9: Hab 3 
          10: Hab 2
           8: Stop Movement
           7: Kill Switch
           3: Manual Bottom
          */


        operatorJoystick = new Joystick(1);
        elevatorManualMaxHeightButton = new JoystickButton(operatorJoystick, 6);
        elevatorManualMaxHeightButton.whenPressed(new changeDesiredProxToMaxCommand());
        elevatorManualMidHeightButton = new JoystickButton(operatorJoystick, 5);
        elevatorManualMidHeightButton.whenPressed(new changeDesiredProxToMidCommand());
        elevatorManualLowHeightButton = new JoystickButton(operatorJoystick, 3);
        elevatorManualLowHeightButton.whenPressed(new changeDesiredProxToLowCommand());
        elevatorMaxHeightButton = new JoystickButton(operatorJoystick, 4);
        elevatorMaxHeightButton.whenReleased(new goToMaxCommand());
        elevatorMidHeightButton = new JoystickButton(operatorJoystick, 2);
        elevatorMidHeightButton.whenReleased(new goToMidCommand());
        elevatorLowHeightButton = new JoystickButton(operatorJoystick, 1);
        elevatorLowHeightButton.whenReleased(new goToLowCommand());
        startLevelThreeClimbingButton = new JoystickButton(operatorJoystick, 9);
        startLevelThreeClimbingButton.whenPressed(new ClimbingThreeCommandGroup());
        startLevelTwoClimbingButton = new JoystickButton(operatorJoystick, 10);
        startLevelTwoClimbingButton.whenPressed(new ClimbingTwoCommandGroup());
        
        driverJoystick = new Joystick(0);
        //shiftingDriveTrainButton = new JoystickButton(driverJoystick, 1);
        //shiftingDriveTrainButton.whileHeld(new shiftToHighGear());
        //changeClawButton = new JoystickButton(driverJoystick, 1);
        //changeClawButton.whileHeld(new openClawCommand());
        outtakeButton = new JoystickButton(driverJoystick, 2);
        outtakeButton.whileHeld(new raiseRollersCommand());
        intakeButton = new JoystickButton(driverJoystick, 1);
        intakeButton.whileHeld(new lowerRollersCommand());
        switchDrivingButton = new JoystickButton(driverJoystick, 5);
        switchDrivingButton.whileHeld(new drivingConditionalCommand());
        rocketPlacementForwardButton = new JoystickButton(driverJoystick, 4);
        rocketPlacementForwardButton.whileHeld(new rocketPlacementForwardCommand());
        changeHandlerPositionButton = new JoystickButton(driverJoystick, 3);
        changeHandlerPositionButton.whenPressed(new changeHandlerBooleanCommand());
        changeHandlerBooleanButton = new JoystickButton(driverJoystick, 3);
        changeHandlerBooleanButton.whenReleased(new changeHandlerPositionCommand());
        changeVisionDriverButton = new JoystickButton(driverJoystick, 8);
        changeVisionDriverButton.whenPressed(new changeVisionTypeDriver());
        changeVisionLimelightButton = new JoystickButton(driverJoystick, 7);
        changeVisionLimelightButton.whenPressed(new changeVisionTypeLimelight());
        extractGamePieceButton = new JoystickButton(driverJoystick, 6);
        extractGamePieceButton.whenPressed(new extractHatchCommand());

        

        

        // SmartDashboard Buttons
        SmartDashboard.putData("LiftElevatorLevelThree", new LiftElevatorLevelThree());
        SmartDashboard.putData("LiftRobot", new LiftRobot());
        SmartDashboard.putData("MoveRobot", new MoveRobot());
        SmartDashboard.putData("RetractFoot", new RetractFoot());
        SmartDashboard.putData("ClimbingTwoCommandGroup", new ClimbingTwoCommandGroup());
        SmartDashboard.putData("ClimbingThreeCommandGroup", new ClimbingThreeCommandGroup());
        /* SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("changeHandlerPositionCommand", new changeHandlerPositionCommand());
        SmartDashboard.putData("changeHandlerBooleanCommand", new changeHandlerBooleanCommand());
        SmartDashboard.putData("rocketPlacementForwardCommand", new rocketPlacementForwardCommand());
        SmartDashboard.putData("runIntakeCommand", new runIntakeCommand());
        SmartDashboard.putData("changeDesiredProxToLowCommand", new changeDesiredProxToLowCommand());
        SmartDashboard.putData("changeDesiredProxToMidCommand", new changeDesiredProxToMidCommand());
        SmartDashboard.putData("changeDesiredProxToMaxCommand", new changeDesiredProxToMaxCommand());
        SmartDashboard.putData("moveElevatorCommand", new moveElevatorCommand());
        SmartDashboard.putData("shiftToHighCommand", new shiftToHighCommand());
        SmartDashboard.putData("drivingConditionalCommand", new drivingConditionalCommand());
        SmartDashboard.putData("pipelineSwitchingConditionalCommand", new pipelineSwitchingConditionalCommand());
        SmartDashboard.putData("changePipelineCommand", new changePipelineCommand());
        SmartDashboard.putData("driveVisionGuided", new driveVisionGuided());
        SmartDashboard.putData("driveDifferentially", new driveDifferentially());
        SmartDashboard.putData("visionPipelineCommand", new visionPipelineCommand());
        SmartDashboard.putData("driverPipelineCommand", new driverPipelineCommand());
        SmartDashboard.putData("rocketPlacementBackwardCommand", new rocketPlacementBackwardCommand());
        SmartDashboard.putData("openClawCommand", new openClawCommand());
        SmartDashboard.putData("closeClawCommand", new closeClawCommand());
        SmartDashboard.putData("shiftingDriveTrainCommand", new shiftingDriveTrainCommand());
        SmartDashboard.putData("shiftToHighGear", new shiftToHighGear());
        SmartDashboard.putData("shiftToLowGear", new shiftToLowGear());*/

        
    }

    public Joystick getdriverJoystick() {
        return driverJoystick;
    }

    public Joystick getoperatorJoystick() {
        return operatorJoystick;
    }

    public boolean elevatorButtonValue (String height) {
        if (height == "Max") {
            return elevatorMaxHeightButton.get();
        } else if (height == "Mid") {
            return elevatorMidHeightButton.get();
        } else {
            return elevatorLowHeightButton.get();
        }
    }

    public boolean switchPipelineButtonValue() {
        return switchPipelineButton.get();
    }

    public boolean switchPipelineBooleanButtonValue() {
        return switchPipelineBooleanButton.get();
    }

    public boolean outtakeButtonValue() {
        return outtakeButton.get();
    }

    public boolean intakeButtonValue() {
        return intakeButton.get();
    }

    public boolean shiftingButtonValue() {
        return shiftingDriveTrainButton.get();
    }

    public boolean switchDrivingButtonValue() {
        return switchDrivingButton.get();
    }
    public boolean handlerPositionValue() {
        return changeHandlerPositionButton.get();
    }
    public boolean rocketPlacementForwardButtonValue() {
        return rocketPlacementForwardButton.get();
    }
    public boolean endMovementButtonValue() {
        return operatorJoystick.getRawButton(8);
    }
}

